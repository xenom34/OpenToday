package com.fazziclay.opentoday.app;

import static android.content.Context.MODE_PRIVATE;

import android.content.Context;
import android.content.SharedPreferences;

import com.fazziclay.javaneoutil.FileUtil;

import java.io.File;

public class PinCodeManager {
    public static final int MAX_LENGTH = 10;

    private final SharedPreferences sharedPreferences;
    private final File backupFile;


    public PinCodeManager(Context context) {
        this.sharedPreferences = context.getSharedPreferences(App.SHARED_NAME, MODE_PRIVATE);
        this.backupFile = new File(context.getExternalFilesDir(""), "pcb");
    }

    public boolean isPinCodeSet() {
        return sharedPreferences.contains(App.SHARED_KEY_PINCODE);
    }

    public String getPinCode() {
        return sharedPreferences.getString(App.SHARED_KEY_PINCODE, "0000");
    }

    public void disablePinCode() {
        sharedPreferences.edit().remove(App.SHARED_KEY_PINCODE).apply();
        if (FileUtil.isExist(backupFile)) {
            FileUtil.delete(backupFile);
        }
    }

    public void enablePinCode(String pin) {
        if (pin.isEmpty()) {
            throw new PinCodeNotValidateException(ValidationException.EMPTY);
        }
        for (char c : pin.toCharArray()) {
            if (!Character.isDigit(c)) {
                throw new PinCodeNotValidateException(ValidationException.CONTAINS_NON_DIGITS_CHARS);
            }
        }
        if (pin.length() > MAX_LENGTH) {
            throw new PinCodeNotValidateException(ValidationException.TOO_LONG);
        }
        sharedPreferences.edit().putString(App.SHARED_KEY_PINCODE, pin).apply();
        FileUtil.setText(backupFile, String.format("# Generated by OpenToday app. (DO NOT EDIT)\n# This is a pin-code backup file.\n\nYour pin-code is: %s", pin));
    }

    public static class PinCodeNotValidateException extends RuntimeException {
        private final ValidationException validationException;

        public PinCodeNotValidateException(ValidationException validationException) {
            super("Pin-code not validated!");
            this.validationException = validationException;
        }

        public ValidationException getValidationException() {
            return validationException;
        }
    }

    public enum ValidationException {
        CONTAINS_NON_DIGITS_CHARS,
        EMPTY,
        TOO_LONG
    }
}
